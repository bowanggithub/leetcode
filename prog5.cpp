//longest palindromic substring
#include <iostream>
#include <string>
#include <vector>
using namespace std;

string findPalindrome(string s, int left, int right)
{
    int n=s.size();
    int l=left;
    int r=right;
    while (l>=0 && r<=n-1 && s[l]==s[r])
    {
        l--;
        r++;
    }
    return s.substr(l+1,r-l-1);
}

string findLongestPalindrome(string s)
{
    int n=s.size();
    if (n<=1)
        return s;

    string longest;
    string str;
    for (int i=0; i<n-1; i++)
    {
        str=findPalindrome(s,i,i);
        if (str.size() > longest.size())
            longest=str;
        str=findPalindrome(s,i,i+1);
        if (str.size() > longest.size())
            longest=str;
    }
    return longest;
}

int main()
{
    string s = "abacdfgdcaba";
    cout << s << " : " << findLongestPalindrome(s) << endl;

    string s
    cout << s1 << " : " << findLongestPalindrome(s1) << endl;
    return 0;
}
